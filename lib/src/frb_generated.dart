// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'api/logger.dart';
import 'api/network.dart';
import 'api/progress_report.dart';
import 'api/seed_search_engine.dart';
import 'api/table_generation.dart';
import 'api/utils.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1158392146;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'xelis_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  List<String> crateApiSeedSearchEngineSearchEngineCheckSeed(
      {required SearchEngine that, required List<String> seed});

  SearchEngine crateApiSeedSearchEngineSearchEngineInit(
      {required BigInt languageIndex});

  List<String> crateApiSeedSearchEngineSearchEngineSearch(
      {required SearchEngine that, required String query});

  LevelFilter crateApiLoggerSendToDartLoggerAutoAccessorGetLevel(
      {required SendToDartLogger that});

  void crateApiLoggerSendToDartLoggerAutoAccessorSetLevel(
      {required SendToDartLogger that, required LevelFilter level});

  Stream<LogEntry> crateApiLoggerSendToDartLoggerSetStreamSink();

  BigInt crateApiWalletSummaryTransactionAutoAccessorGetFee(
      {required SummaryTransaction that});

  String crateApiWalletSummaryTransactionAutoAccessorGetHash(
      {required SummaryTransaction that});

  TransactionTypeBuilder
      crateApiWalletSummaryTransactionAutoAccessorGetTransactionType(
          {required SummaryTransaction that});

  void crateApiWalletSummaryTransactionAutoAccessorSetFee(
      {required SummaryTransaction that, required BigInt fee});

  void crateApiWalletSummaryTransactionAutoAccessorSetHash(
      {required SummaryTransaction that, required String hash});

  void crateApiWalletSummaryTransactionAutoAccessorSetTransactionType(
      {required SummaryTransaction that,
      required TransactionTypeBuilder transactionType});

  Future<List<String>> crateApiWalletXelisWalletAllHistory(
      {required XelisWallet that});

  Future<void> crateApiWalletXelisWalletBroadcastTransaction(
      {required XelisWallet that, required String txHash});

  Future<void> crateApiWalletXelisWalletChangePassword(
      {required XelisWallet that,
      required String oldPassword,
      required String newPassword});

  Future<(Transaction, TransactionBuilderState)>
      crateApiWalletXelisWalletClearTransaction(
          {required XelisWallet that, required String txHash});

  Future<void> crateApiWalletXelisWalletClose({required XelisWallet that});

  Future<String> crateApiWalletXelisWalletConvertTransactionsToCsv(
      {required XelisWallet that});

  Future<String> crateApiWalletXelisWalletCreateBurnAllTransaction(
      {required XelisWallet that, required String assetHash});

  Future<String> crateApiWalletXelisWalletCreateBurnTransaction(
      {required XelisWallet that,
      required double floatAmount,
      required String assetHash});

  Future<String> crateApiWalletXelisWalletCreateTransferAllTransaction(
      {required XelisWallet that,
      required String strAddress,
      String? assetHash,
      String? extraData});

  Future<String> crateApiWalletXelisWalletCreateTransfersTransaction(
      {required XelisWallet that, required List<Transfer> transfers});

  Future<String> crateApiWalletXelisWalletEstimateFees(
      {required XelisWallet that, required List<Transfer> transfers});

  Stream<String> crateApiWalletXelisWalletEventsStream(
      {required XelisWallet that});

  Future<void> crateApiWalletXelisWalletExportTransactionsToCsvFile(
      {required XelisWallet that, required String filePath});

  Future<String> crateApiWalletXelisWalletFormatCoin(
      {required XelisWallet that,
      required BigInt atomicAmount,
      String? assetHash});

  String crateApiWalletXelisWalletGetAddressStr({required XelisWallet that});

  Future<Map<String, String>> crateApiWalletXelisWalletGetAssetBalances(
      {required XelisWallet that});

  Future<Map<String, BigInt>> crateApiWalletXelisWalletGetAssetBalancesRaw(
      {required XelisWallet that});

  Future<int> crateApiWalletXelisWalletGetAssetDecimals(
      {required XelisWallet that, required String asset});

  Future<String> crateApiWalletXelisWalletGetDaemonInfo(
      {required XelisWallet that});

  String crateApiWalletXelisWalletGetNetwork({required XelisWallet that});

  Future<BigInt> crateApiWalletXelisWalletGetNonce({required XelisWallet that});

  Future<String> crateApiWalletXelisWalletGetSeed(
      {required XelisWallet that, BigInt? languageIndex});

  Future<String> crateApiWalletXelisWalletGetXelisBalance(
      {required XelisWallet that});

  Future<BigInt> crateApiWalletXelisWalletGetXelisBalanceRaw(
      {required XelisWallet that});

  Future<bool> crateApiWalletXelisWalletHasXelisBalance(
      {required XelisWallet that});

  Future<bool> crateApiWalletXelisWalletIsOnline({required XelisWallet that});

  Future<void> crateApiWalletXelisWalletIsValidPassword(
      {required XelisWallet that, required String password});

  Future<void> crateApiWalletXelisWalletOfflineMode(
      {required XelisWallet that});

  Future<void> crateApiWalletXelisWalletOnlineMode(
      {required XelisWallet that, required String daemonAddress});

  Future<void> crateApiWalletXelisWalletRescan(
      {required XelisWallet that, required BigInt topoheight});

  Future<void> crateApiProgressReportAddProgressReport(
      {required Report report});

  Stream<LogEntry> crateApiApiCreateLogStream();

  Stream<Report> crateApiApiCreateProgressReportStream();

  Future<XelisWallet> crateApiWalletCreateXelisWallet(
      {required String name,
      required String directory,
      required String password,
      required Network network,
      String? seed,
      String? privateKey,
      String? precomputedTablesPath,
      bool? l1Low});

  Future<String> crateApiUtilsFormatCoin(
      {required BigInt value, required int decimals});

  Future<String> crateApiUtilsFormatXelis({required BigInt value});

  PrecomputedTablesShared? crateApiWalletGetCachedTable();

  BigInt crateApiUtilsGetLanguageIndexFromStr({required String input});

  List<String> crateApiUtilsGetMnemonicWords({required BigInt languageIndex});

  Future<void> crateApiLoggerInitLogger();

  bool crateApiUtilsIsAddressValid({required String strAddress});

  Future<XelisWallet> crateApiWalletOpenXelisWallet(
      {required String name,
      required String directory,
      required String password,
      required Network network,
      String? precomputedTablesPath,
      bool? l1Low});

  Future<bool> crateApiTableGenerationPrecomputedTablesExist(
      {required String precomputedTablesPath});

  Future<void> crateApiApiSetUpRustLogger();

  String crateApiUtilsSplitIntegratedAddressJson(
      {required String integratedAddress});

  Future<void> crateApiWalletUpdateTables(
      {required String precomputedTablesPath, required bool l1Low});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LevelFilter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LevelFilter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LevelFilterPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrecomputedTablesShared;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrecomputedTablesShared;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PrecomputedTablesSharedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SearchEngine;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SearchEnginePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SendToDartLogger;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SendToDartLogger;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SendToDartLoggerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SummaryTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SummaryTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SummaryTransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transaction;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionBuilderState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionBuilderState;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TransactionBuilderStatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionTypeBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionTypeBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TransactionTypeBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_XelisWalletPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  List<String> crateApiSeedSearchEngineSearchEngineCheckSeed(
      {required SearchEngine that, required List<String> seed}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
                that);
        var arg1 = cst_encode_list_String(seed);
        return wire
            .wire__crate__api__seed_search_engine__SearchEngine_check_seed(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSeedSearchEngineSearchEngineCheckSeedConstMeta,
      argValues: [that, seed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSeedSearchEngineSearchEngineCheckSeedConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_check_seed",
        argNames: ["that", "seed"],
      );

  @override
  SearchEngine crateApiSeedSearchEngineSearchEngineInit(
      {required BigInt languageIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_usize(languageIndex);
        return wire
            .wire__crate__api__seed_search_engine__SearchEngine_init(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSeedSearchEngineSearchEngineInitConstMeta,
      argValues: [languageIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSeedSearchEngineSearchEngineInitConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_init",
        argNames: ["languageIndex"],
      );

  @override
  List<String> crateApiSeedSearchEngineSearchEngineSearch(
      {required SearchEngine that, required String query}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
                that);
        var arg1 = cst_encode_String(query);
        return wire.wire__crate__api__seed_search_engine__SearchEngine_search(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSeedSearchEngineSearchEngineSearchConstMeta,
      argValues: [that, query],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSeedSearchEngineSearchEngineSearchConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_search",
        argNames: ["that", "query"],
      );

  @override
  LevelFilter crateApiLoggerSendToDartLoggerAutoAccessorGetLevel(
      {required SendToDartLogger that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
                that);
        return wire
            .wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerSendToDartLoggerAutoAccessorGetLevelConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLoggerSendToDartLoggerAutoAccessorGetLevelConstMeta =>
          const TaskConstMeta(
            debugName: "SendToDartLogger_auto_accessor_get_level",
            argNames: ["that"],
          );

  @override
  void crateApiLoggerSendToDartLoggerAutoAccessorSetLevel(
      {required SendToDartLogger that, required LevelFilter level}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
                level);
        return wire
            .wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerSendToDartLoggerAutoAccessorSetLevelConstMeta,
      argValues: [that, level],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLoggerSendToDartLoggerAutoAccessorSetLevelConstMeta =>
          const TaskConstMeta(
            debugName: "SendToDartLogger_auto_accessor_set_level",
            argNames: ["that", "level"],
          );

  @override
  Stream<LogEntry> crateApiLoggerSendToDartLoggerSetStreamSink() {
    final streamSink = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_log_entry_Dco(streamSink);
        return wire.wire__crate__api__logger__SendToDartLogger_set_stream_sink(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [streamSink],
      apiImpl: this,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiLoggerSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "SendToDartLogger_set_stream_sink",
        argNames: ["streamSink"],
      );

  @override
  BigInt crateApiWalletSummaryTransactionAutoAccessorGetFee(
      {required SummaryTransaction that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSummaryTransactionAutoAccessorGetFeeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorGetFeeConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_get_fee",
            argNames: ["that"],
          );

  @override
  String crateApiWalletSummaryTransactionAutoAccessorGetHash(
      {required SummaryTransaction that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSummaryTransactionAutoAccessorGetHashConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorGetHashConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_get_hash",
            argNames: ["that"],
          );

  @override
  TransactionTypeBuilder
      crateApiWalletSummaryTransactionAutoAccessorGetTransactionType(
          {required SummaryTransaction that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type(
                arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWalletSummaryTransactionAutoAccessorGetTransactionTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorGetTransactionTypeConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_get_transaction_type",
            argNames: ["that"],
          );

  @override
  void crateApiWalletSummaryTransactionAutoAccessorSetFee(
      {required SummaryTransaction that, required BigInt fee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        var arg1 = cst_encode_u_64(fee);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSummaryTransactionAutoAccessorSetFeeConstMeta,
      argValues: [that, fee],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorSetFeeConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_set_fee",
            argNames: ["that", "fee"],
          );

  @override
  void crateApiWalletSummaryTransactionAutoAccessorSetHash(
      {required SummaryTransaction that, required String hash}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        var arg1 = cst_encode_String(hash);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSummaryTransactionAutoAccessorSetHashConstMeta,
      argValues: [that, hash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorSetHashConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_set_hash",
            argNames: ["that", "hash"],
          );

  @override
  void crateApiWalletSummaryTransactionAutoAccessorSetTransactionType(
      {required SummaryTransaction that,
      required TransactionTypeBuilder transactionType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
                transactionType);
        return wire
            .wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWalletSummaryTransactionAutoAccessorSetTransactionTypeConstMeta,
      argValues: [that, transactionType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletSummaryTransactionAutoAccessorSetTransactionTypeConstMeta =>
          const TaskConstMeta(
            debugName: "SummaryTransaction_auto_accessor_set_transaction_type",
            argNames: ["that", "transactionType"],
          );

  @override
  Future<List<String>> crateApiWalletXelisWalletAllHistory(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_all_history(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletAllHistoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletAllHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_all_history",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletXelisWalletBroadcastTransaction(
      {required XelisWallet that, required String txHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(txHash);
        return wire.wire__crate__api__wallet__XelisWallet_broadcast_transaction(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletBroadcastTransactionConstMeta,
      argValues: [that, txHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletBroadcastTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_broadcast_transaction",
        argNames: ["that", "txHash"],
      );

  @override
  Future<void> crateApiWalletXelisWalletChangePassword(
      {required XelisWallet that,
      required String oldPassword,
      required String newPassword}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(oldPassword);
        var arg2 = cst_encode_String(newPassword);
        return wire.wire__crate__api__wallet__XelisWallet_change_password(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletChangePasswordConstMeta,
      argValues: [that, oldPassword, newPassword],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletChangePasswordConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_change_password",
        argNames: ["that", "oldPassword", "newPassword"],
      );

  @override
  Future<(Transaction, TransactionBuilderState)>
      crateApiWalletXelisWalletClearTransaction(
          {required XelisWallet that, required String txHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(txHash);
        return wire.wire__crate__api__wallet__XelisWallet_clear_transaction(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletClearTransactionConstMeta,
      argValues: [that, txHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletClearTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_clear_transaction",
        argNames: ["that", "txHash"],
      );

  @override
  Future<void> crateApiWalletXelisWalletClose({required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_close(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletCloseConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_close",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiWalletXelisWalletConvertTransactionsToCsv(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire
            .wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletConvertTransactionsToCsvConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletXelisWalletConvertTransactionsToCsvConstMeta =>
          const TaskConstMeta(
            debugName: "XelisWallet_convert_transactions_to_csv",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiWalletXelisWalletCreateBurnAllTransaction(
      {required XelisWallet that, required String assetHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(assetHash);
        return wire
            .wire__crate__api__wallet__XelisWallet_create_burn_all_transaction(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletCreateBurnAllTransactionConstMeta,
      argValues: [that, assetHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletXelisWalletCreateBurnAllTransactionConstMeta =>
          const TaskConstMeta(
            debugName: "XelisWallet_create_burn_all_transaction",
            argNames: ["that", "assetHash"],
          );

  @override
  Future<String> crateApiWalletXelisWalletCreateBurnTransaction(
      {required XelisWallet that,
      required double floatAmount,
      required String assetHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_f_64(floatAmount);
        var arg2 = cst_encode_String(assetHash);
        return wire
            .wire__crate__api__wallet__XelisWallet_create_burn_transaction(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletCreateBurnTransactionConstMeta,
      argValues: [that, floatAmount, assetHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletCreateBurnTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_create_burn_transaction",
        argNames: ["that", "floatAmount", "assetHash"],
      );

  @override
  Future<String> crateApiWalletXelisWalletCreateTransferAllTransaction(
      {required XelisWallet that,
      required String strAddress,
      String? assetHash,
      String? extraData}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(strAddress);
        var arg2 = cst_encode_opt_String(assetHash);
        var arg3 = cst_encode_opt_String(extraData);
        return wire
            .wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction(
                port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiWalletXelisWalletCreateTransferAllTransactionConstMeta,
      argValues: [that, strAddress, assetHash, extraData],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletXelisWalletCreateTransferAllTransactionConstMeta =>
          const TaskConstMeta(
            debugName: "XelisWallet_create_transfer_all_transaction",
            argNames: ["that", "strAddress", "assetHash", "extraData"],
          );

  @override
  Future<String> crateApiWalletXelisWalletCreateTransfersTransaction(
      {required XelisWallet that, required List<Transfer> transfers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_list_transfer(transfers);
        return wire
            .wire__crate__api__wallet__XelisWallet_create_transfers_transaction(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletCreateTransfersTransactionConstMeta,
      argValues: [that, transfers],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletXelisWalletCreateTransfersTransactionConstMeta =>
          const TaskConstMeta(
            debugName: "XelisWallet_create_transfers_transaction",
            argNames: ["that", "transfers"],
          );

  @override
  Future<String> crateApiWalletXelisWalletEstimateFees(
      {required XelisWallet that, required List<Transfer> transfers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_list_transfer(transfers);
        return wire.wire__crate__api__wallet__XelisWallet_estimate_fees(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletEstimateFeesConstMeta,
      argValues: [that, transfers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletEstimateFeesConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_estimate_fees",
        argNames: ["that", "transfers"],
      );

  @override
  Stream<String> crateApiWalletXelisWalletEventsStream(
      {required XelisWallet that}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_StreamSink_String_Dco(sink);
        return wire.wire__crate__api__wallet__XelisWallet_events_stream(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletEventsStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletXelisWalletEventsStreamConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_events_stream",
        argNames: ["that", "sink"],
      );

  @override
  Future<void> crateApiWalletXelisWalletExportTransactionsToCsvFile(
      {required XelisWallet that, required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(filePath);
        return wire
            .wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletExportTransactionsToCsvFileConstMeta,
      argValues: [that, filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletXelisWalletExportTransactionsToCsvFileConstMeta =>
          const TaskConstMeta(
            debugName: "XelisWallet_export_transactions_to_csv_file",
            argNames: ["that", "filePath"],
          );

  @override
  Future<String> crateApiWalletXelisWalletFormatCoin(
      {required XelisWallet that,
      required BigInt atomicAmount,
      String? assetHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_u_64(atomicAmount);
        var arg2 = cst_encode_opt_String(assetHash);
        return wire.wire__crate__api__wallet__XelisWallet_format_coin(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletFormatCoinConstMeta,
      argValues: [that, atomicAmount, assetHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletFormatCoinConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_format_coin",
        argNames: ["that", "atomicAmount", "assetHash"],
      );

  @override
  String crateApiWalletXelisWalletGetAddressStr({required XelisWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_address_str(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletGetAddressStrConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetAddressStrConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_address_str",
        argNames: ["that"],
      );

  @override
  Future<Map<String, String>> crateApiWalletXelisWalletGetAssetBalances(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_asset_balances(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Map_String_String_None,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetAssetBalancesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetAssetBalancesConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_asset_balances",
        argNames: ["that"],
      );

  @override
  Future<Map<String, BigInt>> crateApiWalletXelisWalletGetAssetBalancesRaw(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire
            .wire__crate__api__wallet__XelisWallet_get_asset_balances_raw(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Map_String_u_64_None,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetAssetBalancesRawConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetAssetBalancesRawConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_asset_balances_raw",
        argNames: ["that"],
      );

  @override
  Future<int> crateApiWalletXelisWalletGetAssetDecimals(
      {required XelisWallet that, required String asset}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(asset);
        return wire.wire__crate__api__wallet__XelisWallet_get_asset_decimals(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetAssetDecimalsConstMeta,
      argValues: [that, asset],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetAssetDecimalsConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_asset_decimals",
        argNames: ["that", "asset"],
      );

  @override
  Future<String> crateApiWalletXelisWalletGetDaemonInfo(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_daemon_info(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetDaemonInfoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetDaemonInfoConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_daemon_info",
        argNames: ["that"],
      );

  @override
  String crateApiWalletXelisWalletGetNetwork({required XelisWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_network(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletGetNetworkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_network",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiWalletXelisWalletGetNonce(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_nonce(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletGetNonceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetNonceConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_nonce",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiWalletXelisWalletGetSeed(
      {required XelisWallet that, BigInt? languageIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_opt_box_autoadd_usize(languageIndex);
        return wire.wire__crate__api__wallet__XelisWallet_get_seed(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetSeedConstMeta,
      argValues: [that, languageIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetSeedConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_seed",
        argNames: ["that", "languageIndex"],
      );

  @override
  Future<String> crateApiWalletXelisWalletGetXelisBalance(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_xelis_balance(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetXelisBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetXelisBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_xelis_balance",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiWalletXelisWalletGetXelisBalanceRaw(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletGetXelisBalanceRawConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletGetXelisBalanceRawConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_get_xelis_balance_raw",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiWalletXelisWalletHasXelisBalance(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_has_xelis_balance(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletHasXelisBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletHasXelisBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_has_xelis_balance",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiWalletXelisWalletIsOnline({required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_is_online(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletXelisWalletIsOnlineConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletIsOnlineConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_is_online",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletXelisWalletIsValidPassword(
      {required XelisWallet that, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(password);
        return wire.wire__crate__api__wallet__XelisWallet_is_valid_password(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletIsValidPasswordConstMeta,
      argValues: [that, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletIsValidPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_is_valid_password",
        argNames: ["that", "password"],
      );

  @override
  Future<void> crateApiWalletXelisWalletOfflineMode(
      {required XelisWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        return wire.wire__crate__api__wallet__XelisWallet_offline_mode(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletOfflineModeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletOfflineModeConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_offline_mode",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletXelisWalletOnlineMode(
      {required XelisWallet that, required String daemonAddress}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_String(daemonAddress);
        return wire.wire__crate__api__wallet__XelisWallet_online_mode(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletOnlineModeConstMeta,
      argValues: [that, daemonAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletOnlineModeConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_online_mode",
        argNames: ["that", "daemonAddress"],
      );

  @override
  Future<void> crateApiWalletXelisWalletRescan(
      {required XelisWallet that, required BigInt topoheight}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
                that);
        var arg1 = cst_encode_u_64(topoheight);
        return wire.wire__crate__api__wallet__XelisWallet_rescan(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletXelisWalletRescanConstMeta,
      argValues: [that, topoheight],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletXelisWalletRescanConstMeta =>
      const TaskConstMeta(
        debugName: "XelisWallet_rescan",
        argNames: ["that", "topoheight"],
      );

  @override
  Future<void> crateApiProgressReportAddProgressReport(
      {required Report report}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_report(report);
        return wire.wire__crate__api__progress_report__add_progress_report(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProgressReportAddProgressReportConstMeta,
      argValues: [report],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProgressReportAddProgressReportConstMeta =>
      const TaskConstMeta(
        debugName: "add_progress_report",
        argNames: ["report"],
      );

  @override
  Stream<LogEntry> crateApiApiCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_log_entry_Dco(s);
        return wire.wire__crate__api__api__create_log_stream(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateApiApiCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Stream<Report> crateApiApiCreateProgressReportStream() {
    final streamSink = RustStreamSink<Report>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_report_Dco(streamSink);
        return wire.wire__crate__api__api__create_progress_report_stream(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiCreateProgressReportStreamConstMeta,
      argValues: [streamSink],
      apiImpl: this,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiApiCreateProgressReportStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_progress_report_stream",
        argNames: ["streamSink"],
      );

  @override
  Future<XelisWallet> crateApiWalletCreateXelisWallet(
      {required String name,
      required String directory,
      required String password,
      required Network network,
      String? seed,
      String? privateKey,
      String? precomputedTablesPath,
      bool? l1Low}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_String(directory);
        var arg2 = cst_encode_String(password);
        var arg3 = cst_encode_network(network);
        var arg4 = cst_encode_opt_String(seed);
        var arg5 = cst_encode_opt_String(privateKey);
        var arg6 = cst_encode_opt_String(precomputedTablesPath);
        var arg7 = cst_encode_opt_box_autoadd_bool(l1Low);
        return wire.wire__crate__api__wallet__create_xelis_wallet(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletCreateXelisWalletConstMeta,
      argValues: [
        name,
        directory,
        password,
        network,
        seed,
        privateKey,
        precomputedTablesPath,
        l1Low
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletCreateXelisWalletConstMeta =>
      const TaskConstMeta(
        debugName: "create_xelis_wallet",
        argNames: [
          "name",
          "directory",
          "password",
          "network",
          "seed",
          "privateKey",
          "precomputedTablesPath",
          "l1Low"
        ],
      );

  @override
  Future<String> crateApiUtilsFormatCoin(
      {required BigInt value, required int decimals}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(value);
        var arg1 = cst_encode_u_8(decimals);
        return wire.wire__crate__api__utils__format_coin(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsFormatCoinConstMeta,
      argValues: [value, decimals],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsFormatCoinConstMeta => const TaskConstMeta(
        debugName: "format_coin",
        argNames: ["value", "decimals"],
      );

  @override
  Future<String> crateApiUtilsFormatXelis({required BigInt value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_u_64(value);
        return wire.wire__crate__api__utils__format_xelis(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsFormatXelisConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsFormatXelisConstMeta => const TaskConstMeta(
        debugName: "format_xelis",
        argNames: ["value"],
      );

  @override
  PrecomputedTablesShared? crateApiWalletGetCachedTable() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__wallet__get_cached_table();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGetCachedTableConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetCachedTableConstMeta =>
      const TaskConstMeta(
        debugName: "get_cached_table",
        argNames: [],
      );

  @override
  BigInt crateApiUtilsGetLanguageIndexFromStr({required String input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(input);
        return wire.wire__crate__api__utils__get_language_index_from_str(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsGetLanguageIndexFromStrConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsGetLanguageIndexFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "get_language_index_from_str",
        argNames: ["input"],
      );

  @override
  List<String> crateApiUtilsGetMnemonicWords({required BigInt languageIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_usize(languageIndex);
        return wire.wire__crate__api__utils__get_mnemonic_words(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsGetMnemonicWordsConstMeta,
      argValues: [languageIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsGetMnemonicWordsConstMeta =>
      const TaskConstMeta(
        debugName: "get_mnemonic_words",
        argNames: ["languageIndex"],
      );

  @override
  Future<void> crateApiLoggerInitLogger() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__logger__init_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggerInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggerInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  bool crateApiUtilsIsAddressValid({required String strAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(strAddress);
        return wire.wire__crate__api__utils__is_address_valid(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsIsAddressValidConstMeta,
      argValues: [strAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsIsAddressValidConstMeta =>
      const TaskConstMeta(
        debugName: "is_address_valid",
        argNames: ["strAddress"],
      );

  @override
  Future<XelisWallet> crateApiWalletOpenXelisWallet(
      {required String name,
      required String directory,
      required String password,
      required Network network,
      String? precomputedTablesPath,
      bool? l1Low}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_String(directory);
        var arg2 = cst_encode_String(password);
        var arg3 = cst_encode_network(network);
        var arg4 = cst_encode_opt_String(precomputedTablesPath);
        var arg5 = cst_encode_opt_box_autoadd_bool(l1Low);
        return wire.wire__crate__api__wallet__open_xelis_wallet(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletOpenXelisWalletConstMeta,
      argValues: [
        name,
        directory,
        password,
        network,
        precomputedTablesPath,
        l1Low
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletOpenXelisWalletConstMeta =>
      const TaskConstMeta(
        debugName: "open_xelis_wallet",
        argNames: [
          "name",
          "directory",
          "password",
          "network",
          "precomputedTablesPath",
          "l1Low"
        ],
      );

  @override
  Future<bool> crateApiTableGenerationPrecomputedTablesExist(
      {required String precomputedTablesPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(precomputedTablesPath);
        return wire
            .wire__crate__api__table_generation__precomputed_tables_exist(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTableGenerationPrecomputedTablesExistConstMeta,
      argValues: [precomputedTablesPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTableGenerationPrecomputedTablesExistConstMeta =>
      const TaskConstMeta(
        debugName: "precomputed_tables_exist",
        argNames: ["precomputedTablesPath"],
      );

  @override
  Future<void> crateApiApiSetUpRustLogger() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__api__set_up_rust_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiSetUpRustLoggerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSetUpRustLoggerConstMeta => const TaskConstMeta(
        debugName: "set_up_rust_logger",
        argNames: [],
      );

  @override
  String crateApiUtilsSplitIntegratedAddressJson(
      {required String integratedAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(integratedAddress);
        return wire
            .wire__crate__api__utils__split_integrated_address_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsSplitIntegratedAddressJsonConstMeta,
      argValues: [integratedAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsSplitIntegratedAddressJsonConstMeta =>
      const TaskConstMeta(
        debugName: "split_integrated_address_json",
        argNames: ["integratedAddress"],
      );

  @override
  Future<void> crateApiWalletUpdateTables(
      {required String precomputedTablesPath, required bool l1Low}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(precomputedTablesPath);
        var arg1 = cst_encode_bool(l1Low);
        return wire.wire__crate__api__wallet__update_tables(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletUpdateTablesConstMeta,
      argValues: [precomputedTablesPath, l1Low],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletUpdateTablesConstMeta => const TaskConstMeta(
        debugName: "update_tables",
        argNames: ["precomputedTablesPath", "l1Low"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LevelFilter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LevelFilter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PrecomputedTablesShared => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PrecomputedTablesShared => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SearchEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SearchEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SendToDartLogger => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SendToDartLogger => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SummaryTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SummaryTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionBuilderState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionBuilderState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionTypeBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionTypeBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LevelFilter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LevelFilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrecomputedTablesShared
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrecomputedTablesSharedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SummaryTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionBuilderState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionBuilderStateImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TransactionTypeBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionTypeBuilderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  XelisWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XelisWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SummaryTransaction
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SummaryTransaction
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XelisWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, BigInt> dco_decode_Map_String_u_64_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_u_64(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  LevelFilter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LevelFilterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PrecomputedTablesShared
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PrecomputedTablesSharedImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SendToDartLogger
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SummaryTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionBuilderState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionBuilderStateImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TransactionTypeBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionTypeBuilderImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  XelisWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XelisWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Report> dco_decode_StreamSink_report_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PrecomputedTablesShared
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Report dco_decode_box_autoadd_report(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_report(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Level dco_decode_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Level.values[raw as int];
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(String, BigInt)> dco_decode_list_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_u_64).toList();
  }

  @protected
  List<Transfer> dco_decode_list_transfer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transfer).toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LogEntry(
      level: dco_decode_level(arr[0]),
      tag: dco_decode_String(arr[1]),
      msg: dco_decode_String(arr[2]),
    );
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PrecomputedTablesShared?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
            raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  (
    Transaction,
    TransactionBuilderState
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (String, BigInt) dco_decode_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  Report dco_decode_report(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Report_TableGeneration(
          progress: dco_decode_f_64(raw[1]),
          step: dco_decode_String(raw[2]),
          message: dco_decode_opt_String(raw[3]),
        );
      case 1:
        return Report_Misc(
          message: dco_decode_opt_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Transfer dco_decode_transfer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Transfer(
      floatAmount: dco_decode_f_64(arr[0]),
      strAddress: dco_decode_String(arr[1]),
      assetHash: dco_decode_String(arr[2]),
      extraData: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LevelFilter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LevelFilterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrecomputedTablesShared
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrecomputedTablesSharedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SendToDartLogger
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SummaryTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionBuilderState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionBuilderStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionTypeBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionTypeBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XelisWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SendToDartLogger
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SummaryTransaction
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SendToDartLogger
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SummaryTransaction
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XelisWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, BigInt> sse_decode_Map_String_u_64_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  LevelFilter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LevelFilterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PrecomputedTablesShared
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PrecomputedTablesSharedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SendToDartLogger
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SendToDartLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SummaryTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SummaryTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionBuilderState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionBuilderStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionTypeBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionTypeBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XelisWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Dco(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Dco(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Report> sse_decode_StreamSink_report_Dco(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PrecomputedTablesShared
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  Report sse_decode_box_autoadd_report(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_report(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Level sse_decode_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Level.values[inner];
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, BigInt)> sse_decode_list_record_string_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<Transfer> sse_decode_list_transfer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transfer>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transfer(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_level(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(level: var_level, tag: var_tag, msg: var_msg);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PrecomputedTablesShared?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    Transaction,
    TransactionBuilderState
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, BigInt) sse_decode_record_string_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Report sse_decode_report(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_progress = sse_decode_f_64(deserializer);
        var var_step = sse_decode_String(deserializer);
        var var_message = sse_decode_opt_String(deserializer);
        return Report_TableGeneration(
            progress: var_progress, step: var_step, message: var_message);
      case 1:
        var var_message = sse_decode_opt_String(deserializer);
        return Report_Misc(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Transfer sse_decode_transfer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_floatAmount = sse_decode_f_64(deserializer);
    var var_strAddress = sse_decode_String(deserializer);
    var var_assetHash = sse_decode_String(deserializer);
    var var_extraData = sse_decode_opt_String(deserializer);
    return Transfer(
        floatAmount: var_floatAmount,
        strAddress: var_strAddress,
        assetHash: var_assetHash,
        extraData: var_extraData);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
      LevelFilter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LevelFilterImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
      PrecomputedTablesShared raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PrecomputedTablesSharedImpl)
        .frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
      SearchEngine raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SearchEngineImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
      SendToDartLogger raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SendToDartLoggerImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
      SummaryTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SummaryTransactionImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
      Transaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
      TransactionBuilderState raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionBuilderStateImpl)
        .frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
      TransactionTypeBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionTypeBuilderImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
      XelisWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as XelisWalletImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
      SendToDartLogger raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SendToDartLoggerImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
      SummaryTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SummaryTransactionImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
      SearchEngine raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SearchEngineImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
      SendToDartLogger raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SendToDartLoggerImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
      SummaryTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SummaryTransactionImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
      XelisWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as XelisWalletImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
      LevelFilter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LevelFilterImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
      PrecomputedTablesShared raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PrecomputedTablesSharedImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
      SearchEngine raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SearchEngineImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
      SendToDartLogger raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SendToDartLoggerImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
      SummaryTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SummaryTransactionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
      Transaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
      TransactionBuilderState raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionBuilderStateImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
      TransactionTypeBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransactionTypeBuilderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
      XelisWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as XelisWalletImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_level(Level raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_network(Network raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          LevelFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LevelFilterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          PrecomputedTablesShared self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrecomputedTablesSharedImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SendToDartLoggerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SummaryTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SummaryTransactionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          TransactionBuilderState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionBuilderStateImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          TransactionTypeBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionTypeBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          XelisWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XelisWalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SendToDartLoggerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SummaryTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SummaryTransactionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SendToDartLoggerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SummaryTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SummaryTransactionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          XelisWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XelisWalletImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_u_64_None(
      Map<String, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
          LevelFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LevelFilterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          PrecomputedTablesShared self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PrecomputedTablesSharedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
          SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SendToDartLoggerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
          SummaryTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SummaryTransactionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
          Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
          TransactionBuilderState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionBuilderStateImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
          TransactionTypeBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionTypeBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
          XelisWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XelisWalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Dco(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_String,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Dco(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_log_entry,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_report_Dco(
      RustStreamSink<Report> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_report,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          PrecomputedTablesShared self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_report(Report self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_report(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_level(Level self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_u_64(
      List<(String, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transfer(List<Transfer> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transfer(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_level(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          PrecomputedTablesShared? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state(
          (Transaction, TransactionBuilderState) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
        self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_u_64(
      (String, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_report(Report self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Report_TableGeneration(
          progress: final progress,
          step: final step,
          message: final message
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_f_64(progress, serializer);
        sse_encode_String(step, serializer);
        sse_encode_opt_String(message, serializer);
      case Report_Misc(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_String(message, serializer);
    }
  }

  @protected
  void sse_encode_transfer(Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.floatAmount, serializer);
    sse_encode_String(self.strAddress, serializer);
    sse_encode_String(self.assetHash, serializer);
    sse_encode_opt_String(self.extraData, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class LevelFilterImpl extends RustOpaque implements LevelFilter {
  // Not to be used by end users
  LevelFilterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LevelFilterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LevelFilter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LevelFilter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LevelFilterPtr,
  );
}

@sealed
class PrecomputedTablesSharedImpl extends RustOpaque
    implements PrecomputedTablesShared {
  // Not to be used by end users
  PrecomputedTablesSharedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PrecomputedTablesSharedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_PrecomputedTablesShared,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_PrecomputedTablesShared,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_PrecomputedTablesSharedPtr,
  );
}

@sealed
class SearchEngineImpl extends RustOpaque implements SearchEngine {
  // Not to be used by end users
  SearchEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SearchEngineImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SearchEngine,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SearchEngine,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SearchEnginePtr,
  );

  List<String> checkSeed({required List<String> seed}) => RustLib.instance.api
      .crateApiSeedSearchEngineSearchEngineCheckSeed(that: this, seed: seed);

  List<String> search({required String query}) => RustLib.instance.api
      .crateApiSeedSearchEngineSearchEngineSearch(that: this, query: query);
}

@sealed
class SendToDartLoggerImpl extends RustOpaque implements SendToDartLogger {
  // Not to be used by end users
  SendToDartLoggerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SendToDartLoggerImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SendToDartLogger,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SendToDartLogger,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SendToDartLoggerPtr,
  );

  LevelFilter get level =>
      RustLib.instance.api.crateApiLoggerSendToDartLoggerAutoAccessorGetLevel(
        that: this,
      );

  set level(LevelFilter level) =>
      RustLib.instance.api.crateApiLoggerSendToDartLoggerAutoAccessorSetLevel(
          that: this, level: level);
}

@sealed
class SummaryTransactionImpl extends RustOpaque implements SummaryTransaction {
  // Not to be used by end users
  SummaryTransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SummaryTransactionImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SummaryTransaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SummaryTransaction,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SummaryTransactionPtr,
  );

  BigInt get fee =>
      RustLib.instance.api.crateApiWalletSummaryTransactionAutoAccessorGetFee(
        that: this,
      );

  String get hash =>
      RustLib.instance.api.crateApiWalletSummaryTransactionAutoAccessorGetHash(
        that: this,
      );

  TransactionTypeBuilder get transactionType => RustLib.instance.api
          .crateApiWalletSummaryTransactionAutoAccessorGetTransactionType(
        that: this,
      );

  set fee(BigInt fee) => RustLib.instance.api
      .crateApiWalletSummaryTransactionAutoAccessorSetFee(that: this, fee: fee);

  set hash(String hash) =>
      RustLib.instance.api.crateApiWalletSummaryTransactionAutoAccessorSetHash(
          that: this, hash: hash);

  set transactionType(TransactionTypeBuilder transactionType) =>
      RustLib.instance.api
          .crateApiWalletSummaryTransactionAutoAccessorSetTransactionType(
              that: this, transactionType: transactionType);
}

@sealed
class TransactionBuilderStateImpl extends RustOpaque
    implements TransactionBuilderState {
  // Not to be used by end users
  TransactionBuilderStateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransactionBuilderStateImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_TransactionBuilderState,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_TransactionBuilderState,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_TransactionBuilderStatePtr,
  );
}

@sealed
class TransactionImpl extends RustOpaque implements Transaction {
  // Not to be used by end users
  TransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransactionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Transaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Transaction,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TransactionPtr,
  );
}

@sealed
class TransactionTypeBuilderImpl extends RustOpaque
    implements TransactionTypeBuilder {
  // Not to be used by end users
  TransactionTypeBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransactionTypeBuilderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_TransactionTypeBuilder,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_TransactionTypeBuilder,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_TransactionTypeBuilderPtr,
  );
}

@sealed
class XelisWalletImpl extends RustOpaque implements XelisWallet {
  // Not to be used by end users
  XelisWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  XelisWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_XelisWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_XelisWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_XelisWalletPtr,
  );

  Future<List<String>> allHistory() =>
      RustLib.instance.api.crateApiWalletXelisWalletAllHistory(
        that: this,
      );

  Future<void> broadcastTransaction({required String txHash}) =>
      RustLib.instance.api.crateApiWalletXelisWalletBroadcastTransaction(
          that: this, txHash: txHash);

  Future<void> changePassword(
          {required String oldPassword, required String newPassword}) =>
      RustLib.instance.api.crateApiWalletXelisWalletChangePassword(
          that: this, oldPassword: oldPassword, newPassword: newPassword);

  Future<(Transaction, TransactionBuilderState)> clearTransaction(
          {required String txHash}) =>
      RustLib.instance.api.crateApiWalletXelisWalletClearTransaction(
          that: this, txHash: txHash);

  Future<void> close() => RustLib.instance.api.crateApiWalletXelisWalletClose(
        that: this,
      );

  Future<String> convertTransactionsToCsv() =>
      RustLib.instance.api.crateApiWalletXelisWalletConvertTransactionsToCsv(
        that: this,
      );

  Future<String> createBurnAllTransaction({required String assetHash}) =>
      RustLib.instance.api.crateApiWalletXelisWalletCreateBurnAllTransaction(
          that: this, assetHash: assetHash);

  Future<String> createBurnTransaction(
          {required double floatAmount, required String assetHash}) =>
      RustLib.instance.api.crateApiWalletXelisWalletCreateBurnTransaction(
          that: this, floatAmount: floatAmount, assetHash: assetHash);

  Future<String> createTransferAllTransaction(
          {required String strAddress, String? assetHash, String? extraData}) =>
      RustLib.instance.api
          .crateApiWalletXelisWalletCreateTransferAllTransaction(
              that: this,
              strAddress: strAddress,
              assetHash: assetHash,
              extraData: extraData);

  Future<String> createTransfersTransaction(
          {required List<Transfer> transfers}) =>
      RustLib.instance.api.crateApiWalletXelisWalletCreateTransfersTransaction(
          that: this, transfers: transfers);

  Future<String> estimateFees({required List<Transfer> transfers}) => RustLib
      .instance.api
      .crateApiWalletXelisWalletEstimateFees(that: this, transfers: transfers);

  Stream<String> eventsStream() =>
      RustLib.instance.api.crateApiWalletXelisWalletEventsStream(
        that: this,
      );

  Future<void> exportTransactionsToCsvFile({required String filePath}) =>
      RustLib.instance.api.crateApiWalletXelisWalletExportTransactionsToCsvFile(
          that: this, filePath: filePath);

  Future<String> formatCoin(
          {required BigInt atomicAmount, String? assetHash}) =>
      RustLib.instance.api.crateApiWalletXelisWalletFormatCoin(
          that: this, atomicAmount: atomicAmount, assetHash: assetHash);

  String getAddressStr() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetAddressStr(
        that: this,
      );

  Future<Map<String, String>> getAssetBalances() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetAssetBalances(
        that: this,
      );

  Future<Map<String, BigInt>> getAssetBalancesRaw() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetAssetBalancesRaw(
        that: this,
      );

  Future<int> getAssetDecimals({required String asset}) => RustLib.instance.api
      .crateApiWalletXelisWalletGetAssetDecimals(that: this, asset: asset);

  Future<String> getDaemonInfo() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetDaemonInfo(
        that: this,
      );

  String getNetwork() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetNetwork(
        that: this,
      );

  Future<BigInt> getNonce() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetNonce(
        that: this,
      );

  Future<String> getSeed({BigInt? languageIndex}) =>
      RustLib.instance.api.crateApiWalletXelisWalletGetSeed(
          that: this, languageIndex: languageIndex);

  Future<String> getXelisBalance() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetXelisBalance(
        that: this,
      );

  Future<BigInt> getXelisBalanceRaw() =>
      RustLib.instance.api.crateApiWalletXelisWalletGetXelisBalanceRaw(
        that: this,
      );

  Future<bool> hasXelisBalance() =>
      RustLib.instance.api.crateApiWalletXelisWalletHasXelisBalance(
        that: this,
      );

  Future<bool> isOnline() =>
      RustLib.instance.api.crateApiWalletXelisWalletIsOnline(
        that: this,
      );

  Future<void> isValidPassword({required String password}) => RustLib
      .instance.api
      .crateApiWalletXelisWalletIsValidPassword(that: this, password: password);

  Future<void> offlineMode() =>
      RustLib.instance.api.crateApiWalletXelisWalletOfflineMode(
        that: this,
      );

  Future<void> onlineMode({required String daemonAddress}) =>
      RustLib.instance.api.crateApiWalletXelisWalletOnlineMode(
          that: this, daemonAddress: daemonAddress);

  Future<void> rescan({required BigInt topoheight}) => RustLib.instance.api
      .crateApiWalletXelisWalletRescan(that: this, topoheight: topoheight);
}
