// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::logger::*;
use crate::api::seed_search_engine::*;
use crate::api::wallet::*;
use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -528130061;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__seed_search_engine__SearchEngine_check_seed_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>,
    >,
    seed: impl CstDecode<Vec<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SearchEngine_check_seed",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_seed = seed.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crate::api::seed_search_engine::SearchEngine::check_seed(
                        &*api_that_guard,
                        api_seed,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__api__seed_search_engine__SearchEngine_init_impl(
    language_index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SearchEngine_init",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_language_index = language_index.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::seed_search_engine::SearchEngine::init(api_language_index),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__seed_search_engine__SearchEngine_search_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>,
    >,
    query: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SearchEngine_search",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_query = query.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crate::api::seed_search_engine::SearchEngine::search(
                        &*api_that_guard,
                        api_query,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendToDartLogger_auto_accessor_get_level",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.level.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>,
    >,
    level: impl CstDecode<LevelFilter>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendToDartLogger_auto_accessor_set_level",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_level = level.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.level = api_level;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__logger__SendToDartLogger_set_stream_sink_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    stream_sink: impl CstDecode<
        StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendToDartLogger_set_stream_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_stream_sink = stream_sink.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::logger::SendToDartLogger::set_stream_sink(api_stream_sink);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_get_fee",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.fee.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_get_hash",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.hash.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_get_transaction_type",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.transaction_type.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
    fee: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_set_fee",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_fee = fee.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.fee = api_fee;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
    hash: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_set_hash",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_hash = hash.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.hash = api_hash;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>,
    >,
    transaction_type: impl CstDecode<TransactionTypeBuilder>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SummaryTransaction_auto_accessor_set_transaction_type",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_transaction_type = transaction_type.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.transaction_type = api_transaction_type;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_all_history_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_all_history",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::all_history(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_broadcast_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    tx_hash: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_broadcast_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_tx_hash = tx_hash.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::broadcast_transaction(
                            &*api_that_guard,
                            api_tx_hash,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_change_password_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    old_password: impl CstDecode<String>,
    new_password: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_change_password",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_old_password = old_password.cst_decode();
            let api_new_password = new_password.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::change_password(
                            &*api_that_guard,
                            api_old_password,
                            api_new_password,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_clear_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    tx_hash: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_clear_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_tx_hash = tx_hash.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::clear_transaction(
                            &*api_that_guard,
                            api_tx_hash,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_close_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_close",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::wallet::XelisWallet::close(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_convert_transactions_to_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::convert_transactions_to_csv(
                                &*api_that_guard,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_create_burn_all_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset_hash: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_create_burn_all_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset_hash = asset_hash.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::create_burn_all_transaction(
                                &*api_that_guard,
                                api_asset_hash,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_create_burn_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    float_amount: impl CstDecode<f64>,
    asset_hash: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_create_burn_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_float_amount = float_amount.cst_decode();
            let api_asset_hash = asset_hash.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::create_burn_transaction(
                            &*api_that_guard,
                            api_float_amount,
                            api_asset_hash,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    str_address: impl CstDecode<String>,
    asset_hash: impl CstDecode<Option<String>>,
    extra_data: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_create_transfer_all_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_str_address = str_address.cst_decode();
            let api_asset_hash = asset_hash.cst_decode();
            let api_extra_data = extra_data.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::create_transfer_all_transaction(
                                &*api_that_guard,
                                api_str_address,
                                api_asset_hash,
                                api_extra_data,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_create_transfers_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    transfers: impl CstDecode<Vec<crate::api::wallet::Transfer>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_create_transfers_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_transfers = transfers.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::create_transfers_transaction(
                                &*api_that_guard,
                                api_transfers,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_estimate_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    transfers: impl CstDecode<Vec<crate::api::wallet::Transfer>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_estimate_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_transfers = transfers.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::estimate_fees(
                            &*api_that_guard,
                            api_transfers,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_events_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    sink: impl CstDecode<StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_events_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_sink = sink.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::wallet::XelisWallet::events_stream(
                                &*api_that_guard,
                                api_sink,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    file_path: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_export_transactions_to_csv_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_file_path = file_path.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::export_transactions_to_csv_file(
                                &*api_that_guard,
                                api_file_path,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_format_coin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    atomic_amount: impl CstDecode<u64>,
    asset_hash: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_format_coin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_atomic_amount = atomic_amount.cst_decode();
            let api_asset_hash = asset_hash.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::format_coin(
                            &*api_that_guard,
                            api_atomic_amount,
                            api_asset_hash,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_address_str_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_address_str",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::wallet::XelisWallet::get_address_str(&*api_that_guard),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_all_assets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_all_assets",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_all_assets(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_balance_by_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_asset_balance_by_id(
                            &*api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_raw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_balance_by_id_raw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_asset_balance_by_id_raw(
                                &*api_that_guard,
                                api_asset,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_balances_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_balances",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_asset_balances(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_decimals_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_decimals",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_asset_decimals(
                            &*api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_asset_metadata(
                            &*api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_asset_ticker_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_asset_ticker",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_asset_ticker(
                            &*api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_daemon_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_daemon_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_daemon_info(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_network_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(crate::api::wallet::XelisWallet::get_network(
                    &*api_that_guard,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_nonce_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_nonce",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::wallet::XelisWallet::get_nonce(&*api_that_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    language_index: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_language_index = language_index.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_seed(
                            &*api_that_guard,
                            api_language_index,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_tracked_asset_balances_raw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_tracked_asset_balances_raw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_tracked_asset_balances_raw(
                                &*api_that_guard,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_xelis_balance_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_xelis_balance",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::get_xelis_balance(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_get_xelis_balance_raw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::get_xelis_balance_raw(
                            &*api_that_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_has_xelis_balance_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_has_xelis_balance",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::has_xelis_balance(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_is_asset_tracked_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_is_asset_tracked",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::is_asset_tracked(
                            &*api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_is_online_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_is_online",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::wallet::XelisWallet::is_online(&*api_that_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_is_valid_password_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    password: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_is_valid_password",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_password = password.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::is_valid_password(
                            &*api_that_guard,
                            api_password,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_offline_mode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_offline_mode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::api::wallet::XelisWallet::offline_mode(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_online_mode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    daemon_address: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_online_mode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_daemon_address = daemon_address.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::online_mode(
                            &*api_that_guard,
                            api_daemon_address,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_rescan_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    topoheight: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_rescan",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_topoheight = topoheight.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::rescan(
                            &*api_that_guard,
                            api_topoheight,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_track_asset_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_track_asset",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::track_asset(
                            &mut *api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__XelisWallet_untrack_asset_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
    >,
    asset: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "XelisWallet_untrack_asset",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_asset = asset.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::wallet::XelisWallet::untrack_asset(
                            &mut *api_that_guard,
                            api_asset,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__progress_report__add_progress_report_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    report: impl CstDecode<crate::api::progress_report::Report>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_progress_report",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_report = report.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::progress_report::add_progress_report(api_report);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__create_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<
        StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::create_log_stream(api_s)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__create_progress_report_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    stream_sink: impl CstDecode<
        StreamSink<
            crate::api::progress_report::Report,
            flutter_rust_bridge::for_generated::DcoCodec,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_progress_report_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_stream_sink = stream_sink.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::api::create_progress_report_stream(api_stream_sink)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wallet__create_xelis_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    name: impl CstDecode<String>,
    directory: impl CstDecode<String>,
    password: impl CstDecode<String>,
    network: impl CstDecode<crate::api::network::Network>,
    seed: impl CstDecode<Option<String>>,
    private_key: impl CstDecode<Option<String>>,
    precomputed_tables_path: impl CstDecode<Option<String>>,
    l1_size: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_xelis_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_name = name.cst_decode();
            let api_directory = directory.cst_decode();
            let api_password = password.cst_decode();
            let api_network = network.cst_decode();
            let api_seed = seed.cst_decode();
            let api_private_key = private_key.cst_decode();
            let api_precomputed_tables_path = precomputed_tables_path.cst_decode();
            let api_l1_size = l1_size.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::wallet::create_xelis_wallet(
                            api_name,
                            api_directory,
                            api_password,
                            api_network,
                            api_seed,
                            api_private_key,
                            api_precomputed_tables_path,
                            api_l1_size,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__drop_wallet_impl(
    wallet: impl CstDecode<XelisWallet>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "drop_wallet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_wallet = wallet.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::wallet::drop_wallet(api_wallet);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__utils__format_coin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u64>,
    decimals: impl CstDecode<u8>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "format_coin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            let api_decimals = decimals.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::utils::format_coin(
                        api_value,
                        api_decimals,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__utils__format_xelis_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "format_xelis",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::utils::format_xelis(api_value))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__wallet__get_cached_table_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_cached_table",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::wallet::get_cached_table())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__utils__get_language_index_from_str_impl(
    input: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_language_index_from_str",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::utils::get_language_index_from_str(&api_input),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__utils__get_mnemonic_words_impl(
    language_index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_mnemonic_words",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_language_index = language_index.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::utils::get_mnemonic_words(api_language_index))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__logger__init_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::logger::init_logger();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__utils__is_address_valid_impl(
    str_address: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_address_valid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_str_address = str_address.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::utils::is_address_valid(api_str_address))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__open_xelis_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    name: impl CstDecode<String>,
    directory: impl CstDecode<String>,
    password: impl CstDecode<String>,
    network: impl CstDecode<crate::api::network::Network>,
    precomputed_tables_path: impl CstDecode<Option<String>>,
    l1_size: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "open_xelis_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_name = name.cst_decode();
            let api_directory = directory.cst_decode();
            let api_password = password.cst_decode();
            let api_network = network.cst_decode();
            let api_precomputed_tables_path = precomputed_tables_path.cst_decode();
            let api_l1_size = l1_size.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::wallet::open_xelis_wallet(
                            api_name,
                            api_directory,
                            api_password,
                            api_network,
                            api_precomputed_tables_path,
                            api_l1_size,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__table_generation__precomputed_tables_exist_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    precomputed_tables_path: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "precomputed_tables_exist",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_precomputed_tables_path = precomputed_tables_path.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::table_generation::precomputed_tables_exist(
                                api_precomputed_tables_path,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wallet__refresh_mt_params_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refresh_mt_params",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::wallet::refresh_mt_params();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__set_mt_params_impl(
    thread_count: impl CstDecode<usize>,
    concurrency: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_mt_params",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_thread_count = thread_count.cst_decode();
            let api_concurrency = concurrency.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::wallet::set_mt_params(api_thread_count, api_concurrency);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__api__set_up_rust_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_up_rust_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::set_up_rust_logger();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__utils__split_integrated_address_json_impl(
    integrated_address: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "split_integrated_address_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_integrated_address = integrated_address.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::api::utils::split_integrated_address_json(api_integrated_address)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__api__wallet__update_tables_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    precomputed_tables_path: impl CstDecode<String>,
    l1_size: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_tables",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_precomputed_tables_path = precomputed_tables_path.cst_decode();
            let api_l1_size = l1_size.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::wallet::update_tables(
                            api_precomputed_tables_path,
                            api_l1_size,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f64> for f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<crate::api::logger::Level> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::logger::Level {
        match self {
            0 => crate::api::logger::Level::Error,
            1 => crate::api::logger::Level::Warn,
            2 => crate::api::logger::Level::Info,
            3 => crate::api::logger::Level::Debug,
            4 => crate::api::logger::Level::Trace,
            _ => unreachable!("Invalid variant for Level: {}", self),
        }
    }
}
impl CstDecode<crate::api::network::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::network::Network {
        match self {
            0 => crate::api::network::Network::Mainnet,
            1 => crate::api::network::Network::Testnet,
            2 => crate::api::network::Network::Dev,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for LevelFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for PrecomputedTablesShared {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SearchEngine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SummaryTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Transaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for TransactionBuilderState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for TransactionTypeBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for XelisWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, u64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::progress_report::Report,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::logger::Level {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::logger::Level::Error,
            1 => crate::api::logger::Level::Warn,
            2 => crate::api::logger::Level::Info,
            3 => crate::api::logger::Level::Debug,
            4 => crate::api::logger::Level::Trace,
            _ => unreachable!("Invalid variant for Level: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, u64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::wallet::Transfer> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::wallet::Transfer>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::logger::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_level = <crate::api::logger::Level>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::logger::LogEntry {
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for crate::api::network::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::network::Network::Mainnet,
            1 => crate::api::network::Network::Testnet,
            2 => crate::api::network::Network::Dev,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<PrecomputedTablesShared> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<PrecomputedTablesShared>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::wallet::XelisAssetOwner> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::wallet::XelisAssetOwner>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for (Transaction, TransactionBuilderState) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Transaction>::sse_decode(deserializer);
        let mut var_field1 = <TransactionBuilderState>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <u64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::progress_report::Report {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_progress = <f64>::sse_decode(deserializer);
                let mut var_step = <String>::sse_decode(deserializer);
                let mut var_message = <Option<String>>::sse_decode(deserializer);
                return crate::api::progress_report::Report::TableGeneration {
                    progress: var_progress,
                    step: var_step,
                    message: var_message,
                };
            }
            1 => {
                let mut var_message = <Option<String>>::sse_decode(deserializer);
                return crate::api::progress_report::Report::Misc {
                    message: var_message,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::wallet::Transfer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_floatAmount = <f64>::sse_decode(deserializer);
        let mut var_strAddress = <String>::sse_decode(deserializer);
        let mut var_assetHash = <String>::sse_decode(deserializer);
        let mut var_extraData = <Option<String>>::sse_decode(deserializer);
        return crate::api::wallet::Transfer {
            float_amount: var_floatAmount,
            str_address: var_strAddress,
            asset_hash: var_assetHash,
            extra_data: var_extraData,
        };
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::wallet::XelisAssetMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_ticker = <String>::sse_decode(deserializer);
        let mut var_decimals = <u8>::sse_decode(deserializer);
        let mut var_maxSupply = <u64>::sse_decode(deserializer);
        let mut var_owner = <Option<crate::api::wallet::XelisAssetOwner>>::sse_decode(deserializer);
        return crate::api::wallet::XelisAssetMetadata {
            name: var_name,
            ticker: var_ticker,
            decimals: var_decimals,
            max_supply: var_maxSupply,
            owner: var_owner,
        };
    }
}

impl SseDecode for crate::api::wallet::XelisAssetOwner {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_contract = <String>::sse_decode(deserializer);
        let mut var_id = <u64>::sse_decode(deserializer);
        return crate::api::wallet::XelisAssetOwner {
            contract: var_contract,
            id: var_id,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<LevelFilter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<LevelFilter> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<LevelFilter>> for LevelFilter {
    fn into_into_dart(self) -> FrbWrapper<LevelFilter> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<PrecomputedTablesShared> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<PrecomputedTablesShared>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PrecomputedTablesShared>>
    for PrecomputedTablesShared
{
    fn into_into_dart(self) -> FrbWrapper<PrecomputedTablesShared> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SearchEngine> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SearchEngine> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SearchEngine>> for SearchEngine {
    fn into_into_dart(self) -> FrbWrapper<SearchEngine> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SendToDartLogger> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SendToDartLogger> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SendToDartLogger>> for SendToDartLogger {
    fn into_into_dart(self) -> FrbWrapper<SendToDartLogger> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SummaryTransaction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<SummaryTransaction>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SummaryTransaction>> for SummaryTransaction {
    fn into_into_dart(self) -> FrbWrapper<SummaryTransaction> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Transaction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Transaction> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Transaction>> for Transaction {
    fn into_into_dart(self) -> FrbWrapper<Transaction> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<TransactionBuilderState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<TransactionBuilderState>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<TransactionBuilderState>>
    for TransactionBuilderState
{
    fn into_into_dart(self) -> FrbWrapper<TransactionBuilderState> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<TransactionTypeBuilder> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<TransactionTypeBuilder>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<TransactionTypeBuilder>>
    for TransactionTypeBuilder
{
    fn into_into_dart(self) -> FrbWrapper<TransactionTypeBuilder> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<XelisWallet> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<XelisWallet> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<XelisWallet>> for XelisWallet {
    fn into_into_dart(self) -> FrbWrapper<XelisWallet> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::logger::Level> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::logger::Level::Error => 0.into_dart(),
            crate::api::logger::Level::Warn => 1.into_dart(),
            crate::api::logger::Level::Info => 2.into_dart(),
            crate::api::logger::Level::Debug => 3.into_dart(),
            crate::api::logger::Level::Trace => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::logger::Level>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::logger::Level>>
    for crate::api::logger::Level
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::logger::Level> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::logger::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::logger::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::logger::LogEntry>
    for crate::api::logger::LogEntry
{
    fn into_into_dart(self) -> crate::api::logger::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::network::Network> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::network::Network::Mainnet => 0.into_dart(),
            crate::api::network::Network::Testnet => 1.into_dart(),
            crate::api::network::Network::Dev => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::network::Network>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::network::Network>>
    for crate::api::network::Network
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::network::Network> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::progress_report::Report {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::progress_report::Report::TableGeneration {
                progress,
                step,
                message,
            } => [
                0.into_dart(),
                progress.into_into_dart().into_dart(),
                step.into_into_dart().into_dart(),
                message.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::progress_report::Report::Misc { message } => {
                [1.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::progress_report::Report
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::progress_report::Report>
    for crate::api::progress_report::Report
{
    fn into_into_dart(self) -> crate::api::progress_report::Report {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wallet::Transfer {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.float_amount.into_into_dart().into_dart(),
            self.str_address.into_into_dart().into_dart(),
            self.asset_hash.into_into_dart().into_dart(),
            self.extra_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::wallet::Transfer {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wallet::Transfer>
    for crate::api::wallet::Transfer
{
    fn into_into_dart(self) -> crate::api::wallet::Transfer {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wallet::XelisAssetMetadata {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.ticker.into_into_dart().into_dart(),
            self.decimals.into_into_dart().into_dart(),
            self.max_supply.into_into_dart().into_dart(),
            self.owner.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wallet::XelisAssetMetadata
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wallet::XelisAssetMetadata>
    for crate::api::wallet::XelisAssetMetadata
{
    fn into_into_dart(self) -> crate::api::wallet::XelisAssetMetadata {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wallet::XelisAssetOwner {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.contract.into_into_dart().into_dart(),
            self.id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wallet::XelisAssetOwner
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wallet::XelisAssetOwner>
    for crate::api::wallet::XelisAssetOwner
{
    fn into_into_dart(self) -> crate::api::wallet::XelisAssetOwner {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for LevelFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for PrecomputedTablesShared {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for SearchEngine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SummaryTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for Transaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for TransactionBuilderState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for TransactionTypeBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for XelisWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, u64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        crate::api::progress_report::Report,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::logger::Level {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::logger::Level::Error => 0,
                crate::api::logger::Level::Warn => 1,
                crate::api::logger::Level::Info => 2,
                crate::api::logger::Level::Debug => 3,
                crate::api::logger::Level::Trace => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, u64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::wallet::Transfer> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::wallet::Transfer>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::logger::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::logger::Level>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::network::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::network::Network::Mainnet => 0,
                crate::api::network::Network::Testnet => 1,
                crate::api::network::Network::Dev => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<PrecomputedTablesShared> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <PrecomputedTablesShared>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::wallet::XelisAssetOwner> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::wallet::XelisAssetOwner>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (Transaction, TransactionBuilderState) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Transaction>::sse_encode(self.0, serializer);
        <TransactionBuilderState>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <u64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::progress_report::Report {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::progress_report::Report::TableGeneration {
                progress,
                step,
                message,
            } => {
                <i32>::sse_encode(0, serializer);
                <f64>::sse_encode(progress, serializer);
                <String>::sse_encode(step, serializer);
                <Option<String>>::sse_encode(message, serializer);
            }
            crate::api::progress_report::Report::Misc { message } => {
                <i32>::sse_encode(1, serializer);
                <Option<String>>::sse_encode(message, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::wallet::Transfer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.float_amount, serializer);
        <String>::sse_encode(self.str_address, serializer);
        <String>::sse_encode(self.asset_hash, serializer);
        <Option<String>>::sse_encode(self.extra_data, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::wallet::XelisAssetMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.ticker, serializer);
        <u8>::sse_encode(self.decimals, serializer);
        <u64>::sse_encode(self.max_supply, serializer);
        <Option<crate::api::wallet::XelisAssetOwner>>::sse_encode(self.owner, serializer);
    }
}

impl SseEncode for crate::api::wallet::XelisAssetOwner {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.contract, serializer);
        <u64>::sse_encode(self.id, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use crate::api::logger::*;
    use crate::api::seed_search_engine::*;
    use crate::api::wallet::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<LevelFilter> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> LevelFilter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<PrecomputedTablesShared> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PrecomputedTablesShared {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        PrecomputedTablesShared,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SearchEngine> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SearchEngine {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SendToDartLogger> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendToDartLogger {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SummaryTransaction> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SummaryTransaction {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<Transaction> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Transaction {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<TransactionBuilderState> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> TransactionBuilderState {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        TransactionBuilderState,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<TransactionTypeBuilder> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> TransactionTypeBuilder {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<XelisWallet> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> XelisWallet {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<String, String>>
        for *mut wire_cst_list_record_string_string
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, String> {
            let vec: Vec<(String, String)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashMap<String, u64>> for *mut wire_cst_list_record_string_u_64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, u64> {
            let vec: Vec<(String, u64)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec>>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec> {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::progress_report::Report,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::progress_report::Report,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<PrecomputedTablesShared> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PrecomputedTablesShared {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<PrecomputedTablesShared>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::progress_report::Report> for *mut wire_cst_report {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::progress_report::Report {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::progress_report::Report>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<usize> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::wallet::XelisAssetOwner> for *mut wire_cst_xelis_asset_owner {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::XelisAssetOwner {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::wallet::XelisAssetOwner>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, String)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<(String, u64)>> for *mut wire_cst_list_record_string_u_64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, u64)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<crate::api::wallet::Transfer>> for *mut wire_cst_list_transfer {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::api::wallet::Transfer> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<crate::api::logger::LogEntry> for wire_cst_log_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::logger::LogEntry {
            crate::api::logger::LogEntry {
                level: self.level.cst_decode(),
                tag: self.tag.cst_decode(),
                msg: self.msg.cst_decode(),
            }
        }
    }
    impl CstDecode<(Transaction,TransactionBuilderState,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (Transaction,TransactionBuilderState,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
    impl CstDecode<(String, String)> for wire_cst_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<(String, u64)> for wire_cst_record_string_u_64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, u64) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<crate::api::progress_report::Report> for wire_cst_report {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::progress_report::Report {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.TableGeneration };
                    crate::api::progress_report::Report::TableGeneration {
                        progress: ans.progress.cst_decode(),
                        step: ans.step.cst_decode(),
                        message: ans.message.cst_decode(),
                    }
                }
                1 => {
                    let ans = unsafe { self.kind.Misc };
                    crate::api::progress_report::Report::Misc {
                        message: ans.message.cst_decode(),
                    }
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::Transfer> for wire_cst_transfer {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::Transfer {
            crate::api::wallet::Transfer {
                float_amount: self.float_amount.cst_decode(),
                str_address: self.str_address.cst_decode(),
                asset_hash: self.asset_hash.cst_decode(),
                extra_data: self.extra_data.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::XelisAssetMetadata> for wire_cst_xelis_asset_metadata {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::XelisAssetMetadata {
            crate::api::wallet::XelisAssetMetadata {
                name: self.name.cst_decode(),
                ticker: self.ticker.cst_decode(),
                decimals: self.decimals.cst_decode(),
                max_supply: self.max_supply.cst_decode(),
                owner: self.owner.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::XelisAssetOwner> for wire_cst_xelis_asset_owner {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::XelisAssetOwner {
            crate::api::wallet::XelisAssetOwner {
                contract: self.contract.cst_decode(),
                id: self.id.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_log_entry {
        fn new_with_null_ptr() -> Self {
            Self {
                level: Default::default(),
                tag: core::ptr::null_mut(),
                msg: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_log_entry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
    impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
    impl NewWithNullPtr for wire_cst_record_string_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_string_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_string_u_64 {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: Default::default(),
            }
        }
    }
    impl Default for wire_cst_record_string_u_64 {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_report {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: ReportKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_report {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_transfer {
        fn new_with_null_ptr() -> Self {
            Self {
                float_amount: Default::default(),
                str_address: core::ptr::null_mut(),
                asset_hash: core::ptr::null_mut(),
                extra_data: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_transfer {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_xelis_asset_metadata {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                ticker: core::ptr::null_mut(),
                decimals: Default::default(),
                max_supply: Default::default(),
                owner: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_xelis_asset_metadata {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_xelis_asset_owner {
        fn new_with_null_ptr() -> Self {
            Self {
                contract: core::ptr::null_mut(),
                id: Default::default(),
            }
        }
    }
    impl Default for wire_cst_xelis_asset_owner {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__seed_search_engine__SearchEngine_check_seed(
        that: usize,
        seed: *mut wire_cst_list_String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_check_seed_impl(that, seed)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__seed_search_engine__SearchEngine_init(
        language_index: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_init_impl(language_index)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__seed_search_engine__SearchEngine_search(
        that: usize,
        query: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_search_impl(that, query)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level(
        that: usize,
        level: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level_impl(that, level)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__logger__SendToDartLogger_set_stream_sink(
        port_: i64,
        stream_sink: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__logger__SendToDartLogger_set_stream_sink_impl(port_, stream_sink)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee(
        that: usize,
        fee: u64,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee_impl(that, fee)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash(
        that: usize,
        hash: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash_impl(that, hash)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type(
        that: usize,
        transaction_type: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type_impl(
            that,
            transaction_type,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_all_history(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_all_history_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_broadcast_transaction(
        port_: i64,
        that: usize,
        tx_hash: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_broadcast_transaction_impl(port_, that, tx_hash)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_change_password(
        port_: i64,
        that: usize,
        old_password: *mut wire_cst_list_prim_u_8_strict,
        new_password: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_change_password_impl(
            port_,
            that,
            old_password,
            new_password,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_clear_transaction(
        port_: i64,
        that: usize,
        tx_hash: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_clear_transaction_impl(port_, that, tx_hash)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_close(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_close_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_create_burn_all_transaction(
        port_: i64,
        that: usize,
        asset_hash: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_create_burn_all_transaction_impl(
            port_, that, asset_hash,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_create_burn_transaction(
        port_: i64,
        that: usize,
        float_amount: f64,
        asset_hash: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_create_burn_transaction_impl(
            port_,
            that,
            float_amount,
            asset_hash,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction(
        port_: i64,
        that: usize,
        str_address: *mut wire_cst_list_prim_u_8_strict,
        asset_hash: *mut wire_cst_list_prim_u_8_strict,
        extra_data: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction_impl(
            port_,
            that,
            str_address,
            asset_hash,
            extra_data,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_create_transfers_transaction(
        port_: i64,
        that: usize,
        transfers: *mut wire_cst_list_transfer,
    ) {
        wire__crate__api__wallet__XelisWallet_create_transfers_transaction_impl(
            port_, that, transfers,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_estimate_fees(
        port_: i64,
        that: usize,
        transfers: *mut wire_cst_list_transfer,
    ) {
        wire__crate__api__wallet__XelisWallet_estimate_fees_impl(port_, that, transfers)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_events_stream(
        port_: i64,
        that: usize,
        sink: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_events_stream_impl(port_, that, sink)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file(
        port_: i64,
        that: usize,
        file_path: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file_impl(
            port_, that, file_path,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_format_coin(
        port_: i64,
        that: usize,
        atomic_amount: u64,
        asset_hash: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_format_coin_impl(
            port_,
            that,
            atomic_amount,
            asset_hash,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_address_str(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__XelisWallet_get_address_str_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_all_assets(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_all_assets_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_raw(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_raw_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_balances(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balances_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_decimals(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_decimals_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_metadata(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_metadata_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_asset_ticker(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_ticker_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_daemon_info(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_daemon_info_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_network(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__XelisWallet_get_network_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_nonce(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_nonce_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_seed(
        port_: i64,
        that: usize,
        language_index: *mut usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_seed_impl(port_, that, language_index)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_tracked_asset_balances_raw(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_tracked_asset_balances_raw_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_xelis_balance(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_xelis_balance_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_has_xelis_balance(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_has_xelis_balance_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_is_asset_tracked(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_is_asset_tracked_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_is_online(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_is_online_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_is_valid_password(
        port_: i64,
        that: usize,
        password: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_is_valid_password_impl(port_, that, password)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_offline_mode(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__wallet__XelisWallet_offline_mode_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_online_mode(
        port_: i64,
        that: usize,
        daemon_address: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_online_mode_impl(port_, that, daemon_address)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_rescan(
        port_: i64,
        that: usize,
        topoheight: u64,
    ) {
        wire__crate__api__wallet__XelisWallet_rescan_impl(port_, that, topoheight)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_track_asset(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_track_asset_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__XelisWallet_untrack_asset(
        port_: i64,
        that: usize,
        asset: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__wallet__XelisWallet_untrack_asset_impl(port_, that, asset)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__progress_report__add_progress_report(
        port_: i64,
        report: *mut wire_cst_report,
    ) {
        wire__crate__api__progress_report__add_progress_report_impl(port_, report)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__api__create_log_stream(
        port_: i64,
        s: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__api__create_log_stream_impl(port_, s)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__api__create_progress_report_stream(
        port_: i64,
        stream_sink: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__api__create_progress_report_stream_impl(port_, stream_sink)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__create_xelis_wallet(
        port_: i64,
        name: *mut wire_cst_list_prim_u_8_strict,
        directory: *mut wire_cst_list_prim_u_8_strict,
        password: *mut wire_cst_list_prim_u_8_strict,
        network: i32,
        seed: *mut wire_cst_list_prim_u_8_strict,
        private_key: *mut wire_cst_list_prim_u_8_strict,
        precomputed_tables_path: *mut wire_cst_list_prim_u_8_strict,
        l1_size: *mut usize,
    ) {
        wire__crate__api__wallet__create_xelis_wallet_impl(
            port_,
            name,
            directory,
            password,
            network,
            seed,
            private_key,
            precomputed_tables_path,
            l1_size,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__drop_wallet(
        wallet: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__drop_wallet_impl(wallet)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__format_coin(
        port_: i64,
        value: u64,
        decimals: u8,
    ) {
        wire__crate__api__utils__format_coin_impl(port_, value, decimals)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__format_xelis(
        port_: i64,
        value: u64,
    ) {
        wire__crate__api__utils__format_xelis_impl(port_, value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__get_cached_table(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__get_cached_table_impl()
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__get_language_index_from_str(
        input: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__get_language_index_from_str_impl(input)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__get_mnemonic_words(
        language_index: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__get_mnemonic_words_impl(language_index)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__logger__init_logger(port_: i64) {
        wire__crate__api__logger__init_logger_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__is_address_valid(
        str_address: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__is_address_valid_impl(str_address)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__open_xelis_wallet(
        port_: i64,
        name: *mut wire_cst_list_prim_u_8_strict,
        directory: *mut wire_cst_list_prim_u_8_strict,
        password: *mut wire_cst_list_prim_u_8_strict,
        network: i32,
        precomputed_tables_path: *mut wire_cst_list_prim_u_8_strict,
        l1_size: *mut usize,
    ) {
        wire__crate__api__wallet__open_xelis_wallet_impl(
            port_,
            name,
            directory,
            password,
            network,
            precomputed_tables_path,
            l1_size,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__table_generation__precomputed_tables_exist(
        port_: i64,
        precomputed_tables_path: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__table_generation__precomputed_tables_exist_impl(
            port_,
            precomputed_tables_path,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__refresh_mt_params(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__refresh_mt_params_impl()
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__set_mt_params(
        thread_count: usize,
        concurrency: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__set_mt_params_impl(thread_count, concurrency)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__api__set_up_rust_logger(port_: i64) {
        wire__crate__api__api__set_up_rust_logger_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__utils__split_integrated_address_json(
        integrated_address: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__split_integrated_address_json_impl(integrated_address)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_wire__crate__api__wallet__update_tables(
        port_: i64,
        precomputed_tables_path: *mut wire_cst_list_prim_u_8_strict,
        l1_size: *mut usize,
    ) {
        wire__crate__api__wallet__update_tables_impl(port_, precomputed_tables_path, l1_size)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_box_autoadd_report() -> *mut wire_cst_report {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_report::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_box_autoadd_usize(value: usize) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_box_autoadd_xelis_asset_owner(
    ) -> *mut wire_cst_xelis_asset_owner {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_xelis_asset_owner::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_list_String(
        len: i32,
    ) -> *mut wire_cst_list_String {
        let wrap = wire_cst_list_String {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_list_record_string_string(
        len: i32,
    ) -> *mut wire_cst_list_record_string_string {
        let wrap = wire_cst_list_record_string_string {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_string_string>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_list_record_string_u_64(
        len: i32,
    ) -> *mut wire_cst_list_record_string_u_64 {
        let wrap = wire_cst_list_record_string_u_64 {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_string_u_64>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_xelis_flutter_cst_new_list_transfer(
        len: i32,
    ) -> *mut wire_cst_list_transfer {
        let wrap = wire_cst_list_transfer {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_transfer>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_String {
        ptr: *mut *mut wire_cst_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_string_string {
        ptr: *mut wire_cst_record_string_string,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_string_u_64 {
        ptr: *mut wire_cst_record_string_u_64,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_transfer {
        ptr: *mut wire_cst_transfer,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_log_entry {
        level: i32,
        tag: *mut wire_cst_list_prim_u_8_strict,
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_transaction_builder_state
    {
        field0: usize,
        field1: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_string {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_u_64 {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_report {
        tag: i32,
        kind: ReportKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union ReportKind {
        TableGeneration: wire_cst_Report_TableGeneration,
        Misc: wire_cst_Report_Misc,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Report_TableGeneration {
        progress: f64,
        step: *mut wire_cst_list_prim_u_8_strict,
        message: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_Report_Misc {
        message: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_transfer {
        float_amount: f64,
        str_address: *mut wire_cst_list_prim_u_8_strict,
        asset_hash: *mut wire_cst_list_prim_u_8_strict,
        extra_data: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_xelis_asset_metadata {
        name: *mut wire_cst_list_prim_u_8_strict,
        ticker: *mut wire_cst_list_prim_u_8_strict,
        decimals: u8,
        max_supply: u64,
        owner: *mut wire_cst_xelis_asset_owner,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_xelis_asset_owner {
        contract: *mut wire_cst_list_prim_u_8_strict,
        id: u64,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use crate::api::logger::*;
    use crate::api::seed_search_engine::*;
    use crate::api::wallet::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec>> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec> {
            StreamSink::deserialize(self)
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self)
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::progress_report::Report,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::progress_report::Report,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self)
        }
    }
    impl CstDecode<String> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self
        }
    }
    impl CstDecode<Vec<String>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<String> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<u8>> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl CstDecode<Vec<(String, String)>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, String)> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<(String, u64)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, u64)> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<crate::api::wallet::Transfer>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::api::wallet::Transfer> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<crate::api::logger::LogEntry>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::logger::LogEntry {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            crate::api::logger::LogEntry {
                level: self_.get(0).cst_decode(),
                tag: self_.get(1).cst_decode(),
                msg: self_.get(2).cst_decode(),
            }
        }
    }
    impl CstDecode<Option<String>> for Option<String> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Option<String> {
            self.map(CstDecode::cst_decode)
        }
    }
    impl CstDecode<(Transaction, TransactionBuilderState)>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (Transaction, TransactionBuilderState) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<(String, String)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<(String, u64)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, u64) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<crate::api::progress_report::Report>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::progress_report::Report {
            let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => crate::api::progress_report::Report::TableGeneration {
                    progress: self_.get(1).cst_decode(),
                    step: self_.get(2).cst_decode(),
                    message: self_.get(3).cst_decode(),
                },
                1 => crate::api::progress_report::Report::Misc {
                    message: self_.get(1).cst_decode(),
                },
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::Transfer>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::Transfer {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            crate::api::wallet::Transfer {
                float_amount: self_.get(0).cst_decode(),
                str_address: self_.get(1).cst_decode(),
                asset_hash: self_.get(2).cst_decode(),
                extra_data: self_.get(3).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::XelisAssetMetadata>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::XelisAssetMetadata {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                5,
                "Expected 5 elements, got {}",
                self_.length()
            );
            crate::api::wallet::XelisAssetMetadata {
                name: self_.get(0).cst_decode(),
                ticker: self_.get(1).cst_decode(),
                decimals: self_.get(2).cst_decode(),
                max_supply: self_.get(3).cst_decode(),
                owner: self_.get(4).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::wallet::XelisAssetOwner>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::wallet::XelisAssetOwner {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::api::wallet::XelisAssetOwner {
                contract: self_.get(0).cst_decode(),
                id: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<LevelFilter> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> LevelFilter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<PrecomputedTablesShared>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PrecomputedTablesShared {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        PrecomputedTablesShared,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SearchEngine> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SearchEngine {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SendToDartLogger> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendToDartLogger {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SummaryTransaction> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SummaryTransaction {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<Transaction> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Transaction {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<TransactionBuilderState>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> TransactionBuilderState {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        TransactionBuilderState,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<TransactionTypeBuilder>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> TransactionTypeBuilder {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<XelisWallet> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> XelisWallet {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<String, String>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, String> {
            let vec: Vec<(String, String)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashMap<String, u64>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, u64> {
            let vec: Vec<(String, u64)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
        > {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>,
        > {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
        > {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>,
        > {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> StreamSink<String, flutter_rust_bridge::for_generated::DcoCodec> {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::logger::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::progress_report::Report,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::progress_report::Report,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            self.is_truthy()
        }
    }
    impl CstDecode<f64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<crate::api::logger::Level>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::logger::Level {
            (self.unchecked_into_f64() as i32).cst_decode()
        }
    }
    impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
                .to_vec()
                .into()
        }
    }
    impl CstDecode<crate::api::network::Network>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::network::Network {
            (self.unchecked_into_f64() as i32).cst_decode()
        }
    }
    impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u64 {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }
    impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__seed_search_engine__SearchEngine_check_seed(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        seed: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_check_seed_impl(that, seed)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__seed_search_engine__SearchEngine_init(
        language_index: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_init_impl(language_index)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__seed_search_engine__SearchEngine_search(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        query: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__seed_search_engine__SearchEngine_search_impl(that, query)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__logger__SendToDartLogger_auto_accessor_get_level_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        level: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__logger__SendToDartLogger_auto_accessor_set_level_impl(that, level)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__logger__SendToDartLogger_set_stream_sink(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        stream_sink: String,
    ) {
        wire__crate__api__logger__SendToDartLogger_set_stream_sink_impl(port_, stream_sink)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_fee_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_hash_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_get_transaction_type_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        fee: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_fee_impl(that, fee)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        hash: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_hash_impl(that, hash)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        transaction_type: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__SummaryTransaction_auto_accessor_set_transaction_type_impl(
            that,
            transaction_type,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_all_history(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_all_history_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_broadcast_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        tx_hash: String,
    ) {
        wire__crate__api__wallet__XelisWallet_broadcast_transaction_impl(port_, that, tx_hash)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_change_password(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        old_password: String,
        new_password: String,
    ) {
        wire__crate__api__wallet__XelisWallet_change_password_impl(
            port_,
            that,
            old_password,
            new_password,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_clear_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        tx_hash: String,
    ) {
        wire__crate__api__wallet__XelisWallet_clear_transaction_impl(port_, that, tx_hash)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_close(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_close_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_convert_transactions_to_csv_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_create_burn_all_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset_hash: String,
    ) {
        wire__crate__api__wallet__XelisWallet_create_burn_all_transaction_impl(
            port_, that, asset_hash,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_create_burn_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        float_amount: f64,
        asset_hash: String,
    ) {
        wire__crate__api__wallet__XelisWallet_create_burn_transaction_impl(
            port_,
            that,
            float_amount,
            asset_hash,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        str_address: String,
        asset_hash: Option<String>,
        extra_data: Option<String>,
    ) {
        wire__crate__api__wallet__XelisWallet_create_transfer_all_transaction_impl(
            port_,
            that,
            str_address,
            asset_hash,
            extra_data,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_create_transfers_transaction(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        transfers: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_create_transfers_transaction_impl(
            port_, that, transfers,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_estimate_fees(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        transfers: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_estimate_fees_impl(port_, that, transfers)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_events_stream(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        sink: String,
    ) {
        wire__crate__api__wallet__XelisWallet_events_stream_impl(port_, that, sink)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        file_path: String,
    ) {
        wire__crate__api__wallet__XelisWallet_export_transactions_to_csv_file_impl(
            port_, that, file_path,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_format_coin(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        atomic_amount: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset_hash: Option<String>,
    ) {
        wire__crate__api__wallet__XelisWallet_format_coin_impl(
            port_,
            that,
            atomic_amount,
            asset_hash,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_address_str(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__XelisWallet_get_address_str_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_all_assets(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_all_assets_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_raw(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balance_by_id_raw_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_balances(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_balances_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_decimals(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_decimals_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_metadata(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_metadata_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_asset_ticker(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_get_asset_ticker_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_daemon_info(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_daemon_info_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_network(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__XelisWallet_get_network_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_nonce(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_nonce_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_seed(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        language_index: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_seed_impl(port_, that, language_index)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_tracked_asset_balances_raw(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_tracked_asset_balances_raw_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_xelis_balance(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_xelis_balance_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_get_xelis_balance_raw_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_has_xelis_balance(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_has_xelis_balance_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_is_asset_tracked(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_is_asset_tracked_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_is_online(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_is_online_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_is_valid_password(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        password: String,
    ) {
        wire__crate__api__wallet__XelisWallet_is_valid_password_impl(port_, that, password)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_offline_mode(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_offline_mode_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_online_mode(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        daemon_address: String,
    ) {
        wire__crate__api__wallet__XelisWallet_online_mode_impl(port_, that, daemon_address)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_rescan(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        topoheight: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__XelisWallet_rescan_impl(port_, that, topoheight)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_track_asset(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_track_asset_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__XelisWallet_untrack_asset(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        asset: String,
    ) {
        wire__crate__api__wallet__XelisWallet_untrack_asset_impl(port_, that, asset)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__progress_report__add_progress_report(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        report: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__progress_report__add_progress_report_impl(port_, report)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__api__create_log_stream(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        s: String,
    ) {
        wire__crate__api__api__create_log_stream_impl(port_, s)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__api__create_progress_report_stream(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        stream_sink: String,
    ) {
        wire__crate__api__api__create_progress_report_stream_impl(port_, stream_sink)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__create_xelis_wallet(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        name: String,
        directory: String,
        password: String,
        network: i32,
        seed: Option<String>,
        private_key: Option<String>,
        precomputed_tables_path: Option<String>,
        l1_size: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__create_xelis_wallet_impl(
            port_,
            name,
            directory,
            password,
            network,
            seed,
            private_key,
            precomputed_tables_path,
            l1_size,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__drop_wallet(
        wallet: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__drop_wallet_impl(wallet)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__format_coin(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        value: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        decimals: u8,
    ) {
        wire__crate__api__utils__format_coin_impl(port_, value, decimals)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__format_xelis(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        value: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__utils__format_xelis_impl(port_, value)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__get_cached_table(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__get_cached_table_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__get_language_index_from_str(
        input: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__get_language_index_from_str_impl(input)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__get_mnemonic_words(
        language_index: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__get_mnemonic_words_impl(language_index)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__logger__init_logger(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__logger__init_logger_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__is_address_valid(
        str_address: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__is_address_valid_impl(str_address)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__open_xelis_wallet(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        name: String,
        directory: String,
        password: String,
        network: i32,
        precomputed_tables_path: Option<String>,
        l1_size: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__open_xelis_wallet_impl(
            port_,
            name,
            directory,
            password,
            network,
            precomputed_tables_path,
            l1_size,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__table_generation__precomputed_tables_exist(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        precomputed_tables_path: String,
    ) {
        wire__crate__api__table_generation__precomputed_tables_exist_impl(
            port_,
            precomputed_tables_path,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__refresh_mt_params(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__refresh_mt_params_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__set_mt_params(
        thread_count: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        concurrency: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__wallet__set_mt_params_impl(thread_count, concurrency)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__api__set_up_rust_logger(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__api__set_up_rust_logger_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__utils__split_integrated_address_json(
        integrated_address: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__utils__split_integrated_address_json_impl(integrated_address)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__wallet__update_tables(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        precomputed_tables_path: String,
        l1_size: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__wallet__update_tables_impl(port_, precomputed_tables_path, l1_size)
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLevelFilter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LevelFilter>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrecomputedTablesShared(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrecomputedTablesShared>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendToDartLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSummaryTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SummaryTransaction>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionBuilderState(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionBuilderState>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionTypeBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionTypeBuilder>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXelisWallet(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XelisWallet>>::decrement_strong_count(ptr as _);
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
